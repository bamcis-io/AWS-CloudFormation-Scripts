{
	"AWSTemplateFormatVersion" : "2010-09-09",

	"Description" : "Deploys the squid config SSM parameter",

	"Parameters" : {
		"ParameterName" : {
			"Type" : "String",
			"Default" : "squid-config"
		},

		"OrganizationTag"            : {
            "Description" : "The organization this account is associated with",
            "Type"        : "String",
            "AllowedPattern" : "^\\S{2,}$",
            "ConstraintDescription" : "Member must satisfy regular expression pattern: ^\\S{2,}$",
            "Default"               : "bamcis.io"
        },
        "ApplicationTag"             : {
            "Description" : "The application this account is associated with",
            "Type"        : "String",
            "AllowedPattern" : "^\\S{2,}$",
            "ConstraintDescription" : "Member must satisfy regular expression pattern: ^\\S{2,}$",
			"Default" : "regional_proxy"
        },
        "EnvironmentTag"             : {
            "Description" : "The environment this account is associated with",
            "Type"        : "String",
            "AllowedPattern" : "^\\S{2,}$",
            "ConstraintDescription" : "Member must satisfy regular expression pattern: ^\\S{2,}$",
            "Default"               : "prod"
        }
	},

	"Conditions" : {
		"IsUsEast1" : {
			"Fn::Equals" : [
				{
					"Ref" : "AWS::Region"
				},
				"us-east-1"
			]
		},
		"IsUsEast2" : {
			"Fn::Equals" : [
				{
					"Ref" : "AWS::Region"
				},
				"us-east-2"
			]
		},
		"IsUsWest2" : {
			"Fn::Equals" : [
				{
					"Ref" : "AWS::Region"
				},
				"us-west-2"
			]
		}
	},

	"Resources" : {
		"SquidConfigParameter" : {
			"Type" : "AWS::SSM::Parameter",
			"Properties" : {
				"Name" : {
					"Ref" : "ParameterName"
				},
				"Tags" : {
					"Name" : {
						"Fn::Sub" : "${ApplicationTag}-${AWS::Region}-SquidConfig-${EnvironmentTag}"
                    },
                    "Environment" : {
						"Ref" : "EnvironmentTag"
                    },
                    "Application" : {
						"Ref" : "ApplicationTag"
                    },
                    "Organization" : {
						"Ref" : "OrganizationTag"
                    }
				},
				"Type" : "String",
				"Value" : {
					"Fn::Join" : [
						"\n",
						[
"cache_effective_user squid",

"## Define an ACL for the source local proxies that are",
"## forwarding here",
"acl source_proxy src all",

"## Additional ACLs",
"acl ssl_ports port 443",
"acl CONNECT method CONNECT",

"## Define acls for amazonaws.com",
"acl aws_domain dstdomain .amazonaws.com",
"acl s3 dstdomain s3.amazonaws.com",
"acl sts dstdomain sts.amazonaws.com",
"acl cloudfront dstdomain cloudfront.amazonaws.com",
"acl globalaccelerator dstdomain globalaccelerator.amazonaws.com",
"acl iam dstdomain iam.amazonaws.com",
"acl r53 dstdomain route53.amazonaws.com",
"acl sqs dstdomain queue.amazonaws.com",
"acl sdb dstdomain sdb.amazonaws.com",
"acl waf dstdomain waf.amazonaws.com",
"acl us_east_1 dstdomain .us-east-1.amazonaws.com",
"acl us_east_2 dstdomain .us-east-2.amazonaws.com",
"acl us_west_2 dstdomain .us-west-2.amazonaws.com",
"acl us_east_1_alt dstdomain .us-east-1.*.amazonaws.com",
"acl us_east_2_alt dstdomain .us-east-2.*.amazonaws.com",
"acl us_west_2_alt dstdomain .us-west-2.*.amazonaws.com",

"## Deny access to anything other than SSL",
"http_access deny !ssl_ports",
"http_access deny CONNECT !ssl_ports",

"## Allow access from the source proxies and allowing",
"## non amazonaws.com to pass seamlessly",
"http_access allow source_proxy !aws_domain",

"## Now specify the cache peer for each region",
{
	"Fn::If" : [
		"IsUsEast1",
		{
			"Fn::Join" : [
				"\n",
				[
					"http_access allow source_proxy s3",
					"http_access allow source_proxy sts",
					"http_access allow source_proxy cloudfront",
					"http_access allow source_proxy iam",
					"http_access allow source_proxy r53",
					"http_access allow source_proxy sqs",
					"http_access allow source_proxy sdb",
					"http_access allow source_proxy waf",
					"http_access allow source_proxy us_east_1",
					"http_access allow source_proxy us_east_1_alt"
				]
			]
		},
		{
			"Fn::Join" : [
				"\n",
				[
					"cache_peer us-east-1.proxy.local parent 3128 0 no-query proxy-only",
					"cache_peer_access us-east-1.proxy.local allow us_east_1",
					"cache_peer_access us-east-1.proxy.local allow us_east_1_alt",
					"cache_peer_access us-east-1.proxy.local allow s3",
					"cache_peer_access us-east-1.proxy.local allow sts",
					"cache_peer_access us-east-1.proxy.local allow iam",
					"cache_peer_access us-east-1.proxy.local allow cloudfront",
					"cache_peer_access us-east-1.proxy.local allow r53",
					"cache_peer_access us-east-1.proxy.local allow sqs",
					"cache_peer_access us-east-1.proxy.local allow sdb",
					"cache_peer_access us-east-1.proxy.local allow waf"
				]
			]
		}
	]
},
{
	"Fn::If" : [
		"IsUsEast2",
		{
			"Fn::Join" : [
				"\n",
				[
					"http_access allow source_proxy us_east_2",
					"http_access allow source_proxy us_east_2_alt"
				]
			]
		},
		{
			"Fn::Join" : [
				"\n",
				[
					"cache_peer us-east-2.proxy.local parent 3128 0 no-query proxy-only",
					"cache_peer_access us-east-2.proxy.local allow us_east_2",
					"cache_peer_access us-east-2.proxy.local allow us_east_2_alt"
				]
			]
		}
	]
},
{
	"Fn::If" : [
		"IsUsWest2",
		{
			"Fn::Join" : [
				"\n",
				[
					"http_access allow source_proxy globalaccelerator",
					"http_access allow source_proxy us_west_2",
					"http_access allow source_proxy us_west_2_alt"
				]
			]
		},
		{
			"Fn::Join" : [
				"\n",
				[
					"cache_peer us-west-2.proxy.local parent 3128 0 no-query proxy-only",
					"cache_peer_access us-west-2.proxy.local allow us_west_2",
					"cache_peer_access us-west-2.proxy.local allow us_west_2_alt",
					"cache_peer_access us-west-2.proxy.local allow globalaccelerator"
				]
			]
		}
	]
},

"## Finally deny all other access to the proxy",
"http_access deny all",

"## Listen on 3128",
"http_port 3128",

"## Logging",
"access_log stdio:/var/log/squid/access.log",
"strip_query_terms off",
"logfile_rotate 7",

"## Turn off caching",
"cache deny all",

"## Enable the X-Forwarded-For header",
"forwarded_for on",

"## Suppress sending squid version information",
"httpd_suppress_version_string on",

"## How long to wait when shutting down squid",
"shutdown_lifetime 30 seconds",

"## Hostname",
"visible_hostname aws_proxy",

"## Prefer ipv4 over v6",
"dns_v4_first on"
						]

					]
				}
			}
		}
	},

	"Outputs" : {
	}
}
